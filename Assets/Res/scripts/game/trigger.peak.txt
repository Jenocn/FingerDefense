/******************************************************
"Game"内置方法:
---------------------------------------------
	播放音乐: 
		channelType: 音轨类型
		audioName: 音乐名称
		volumePercent: 音量百分比(0 ~ 1.0)
		bLoop: 是否循环
	music(channelType, audioName, volumePercent, bLoop);
---------------------------------------------
	音乐控制:
		channelType: 音轨类型
		audioControl: 控制类型
	music_control(channelType, audioControl);
---------------------------------------------
	播放音效:
		audioName: 音效名称
		volumePercent: 音量百分比(0 ~ 1.0)
	sound_effect(audioName, volumePercent);
---------------------------------------------
	创建球:
		ballID: 球ID
		posX: 坐标X
		posY: 坐标Y
		dirX: 方向X
		dirY: 方向Y
		delay: 创建延迟
	create_ball(ballID, posX, posY, dirX, dirY, delay);
---------------------------------------------
	创建效果:
		effectID: 效果ID
		posX: 坐标X
		posY: 坐标Y
		delay: 创建延迟
	create_effect(effectID, posX, posY, delay);
---------------------------------------------
	无限模式创建砖块:
		index: 序号
		brickID: 砖块ID
		posX,posY: 坐标
		hpMax: 生命值
	create_infinite_brick(index, brickID, posX, posY, hpMax);
******************************************************/

import "Unity";
import "Base";
import "Game";

//========================================
// 回调
//========================================

// 首页加载完成
function home_loaded() {
	music(MusicChannelType.BGM, "music_battle_001", 1, true);
}

// 关卡选择加载完成
function level_select_loaded() {
}

// 战斗开始
function battle_start(mapMode, mapID) {
	music(MusicChannelType.BGM, "music_battle_001", 1, true);
}

// 球发生碰撞
function ball_collision(ballID, ballX, ballY, collisionX, collisionY) {
	create_effect(EffectType.SmokeRun, collisionX, collisionY, 0);
	sound_effect("effect_hit_001", 1);
}

// 砖块被击时
function brick_hit(brickID, x, y, attackID, attackElementType) {
}

// 砖块死亡时
function brick_die(brickID, x, y, attackID, attackElementType) {
	if (brickID == BrickType.BrickRed) {
		create_effect(EffectType.CollisionFireRed, x, y, 0.08);
	} else if (brickID == BrickType.BrickGreen) {
		create_effect(EffectType.CollisionFireGreen, x, y, 0.08);
	} else if (brickID == BrickType.BrickBlue) {
		create_effect(EffectType.CollisionFireBlue, x, y, 0.08);
	} else if (brickID == BrickType.Bomb) {
		create_effect(EffectType.BoomArea, x, y, 0.1);
		create_effect(EffectType.CollisionFireOrange, x, y, 0.08);
	} else if (brickID == BrickType.Spawn) {
		create_ball(BallType.Default, x, y, 1, 1, 0.1);
		create_ball(BallType.Default, x, y, -1, 1, 0.1);
		create_effect(EffectType.CollisionFireYellowGreen, x, y, 0.08);
	}
}

// 无限模式生成时调用
function infinite_generate(index, x, y) {
	var id = 1;
	
	var rv = Random.Range(0, 500);
	if (rv < 120) {
		id = BrickType.BrickRed;
	} else if (rv < 240) {
		id = BrickType.BrickGreen;
	} else if (rv < 360) {
		id = BrickType.BrickBlue;
	} else if (rv < 470) {
		id = BrickType.Bomb;
	} else {
		id = BrickType.Spawn;
	}
	
	create_infinite_brick(index, id, x, y, Random.Range(1, 4));
}